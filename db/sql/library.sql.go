// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: library.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createLibrary = `-- name: CreateLibrary :one
INSERT INTO libraries(
    id, user_id, game_id
)
VALUES (
           $1,  $2,  $3
       )
    RETURNING id, user_id, game_id
`

type CreateLibraryParams struct {
	ID     string `json:"id"`
	UserID string `json:"user_id"`
	GameID int32  `json:"game_id"`
}

func (q *Queries) CreateLibrary(ctx context.Context, arg CreateLibraryParams) (Library, error) {
	row := q.db.QueryRowContext(ctx, createLibrary, arg.ID, arg.UserID, arg.GameID)
	var i Library
	err := row.Scan(&i.ID, &i.UserID, &i.GameID)
	return i, err
}

const deleteLibrary = `-- name: DeleteLibrary :one
DELETE FROM libraries
WHERE user_id = $1 AND game_id = $2
    RETURNING id, user_id, game_id
`

type DeleteLibraryParams struct {
	UserID string `json:"user_id"`
	GameID int32  `json:"game_id"`
}

func (q *Queries) DeleteLibrary(ctx context.Context, arg DeleteLibraryParams) (Library, error) {
	row := q.db.QueryRowContext(ctx, deleteLibrary, arg.UserID, arg.GameID)
	var i Library
	err := row.Scan(&i.ID, &i.UserID, &i.GameID)
	return i, err
}

const getUserLibrary = `-- name: GetUserLibrary :many
SELECT games.id, games.name, games.surname, games.price, games."desc", games.link, games.release, games.platforms, games.genre, games.developers, games.publishers, games."inCart", games.selected, games."isHovered", games."isLiked", games.rating, games.cover, games.footage
FROM libraries
         JOIN games ON libraries.game_id = games.game_id
WHERE libraries.user_id = $1
`

func (q *Queries) GetUserLibrary(ctx context.Context, userID string) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, getUserLibrary, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Surname,
			&i.Price,
			&i.Desc,
			&i.Link,
			&i.Release,
			&i.Platforms,
			&i.Genre,
			&i.Developers,
			&i.Publishers,
			&i.InCart,
			&i.Selected,
			&i.IsHovered,
			&i.IsLiked,
			&i.Rating,
			&i.Cover,
			pq.Array(&i.Footage),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
