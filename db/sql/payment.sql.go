// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: payment.sql

package db

import (
	"context"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments(
    id, user_id, price
)
VALUES (
           $1,  $2,  $3
       )
    RETURNING id, user_id, price
`

type CreatePaymentParams struct {
	ID     string  `json:"id"`
	UserID string  `json:"user_id"`
	Price  float64 `json:"price"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment, arg.ID, arg.UserID, arg.Price)
	var i Payment
	err := row.Scan(&i.ID, &i.UserID, &i.Price)
	return i, err
}

const deletePayment = `-- name: DeletePayment :one
DELETE FROM libraries
WHERE user_id = $1 AND game_id = $2
    RETURNING id, user_id, game_id
`

type DeletePaymentParams struct {
	UserID string `json:"user_id"`
	GameID int32  `json:"game_id"`
}

func (q *Queries) DeletePayment(ctx context.Context, arg DeletePaymentParams) (Library, error) {
	row := q.db.QueryRowContext(ctx, deletePayment, arg.UserID, arg.GameID)
	var i Library
	err := row.Scan(&i.ID, &i.UserID, &i.GameID)
	return i, err
}

const getUserPayment = `-- name: GetUserPayment :many
SELECT id, user_id, price
FROM payments
WHERE user_id = $1
`

func (q *Queries) GetUserPayment(ctx context.Context, userID string) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, getUserPayment, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(&i.ID, &i.UserID, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
